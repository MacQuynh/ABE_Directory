let graphqlHTTP,schema,express,cors,morgan,config,pgApiWrapper;_a8f‍.w("express-graphql",[["graphqlHTTP",["graphqlHTTP"],function(v){graphqlHTTP=v}]]);_a8f‍.w("./schema",[["schema",["schema"],function(v){schema=v}]]);_a8f‍.w("express",[["default",["express"],function(v){express=v}]]);_a8f‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_a8f‍.w("morgan",[["default",["morgan"],function(v){morgan=v}]]);_a8f‍.w("./config",[["*",null,function(v){config=v}]]);_a8f‍.w("./db/pg-api",[["default",["pgApiWrapper"],function(v){pgApiWrapper=v}]]);










async function main() {
  const pgApi = await pgApiWrapper();
  const server = express();
  server.use(cors());
  server.use(morgan('dev'));
  server.use(express.urlencoded({ extended: false }));
  server.use(express.json());
  server.use('/:fav.ico', (req, res) => res.sendStatus(204));

  server.use(
    '/graphql',
    graphqlHTTP({
      schema,
      context: { pgApi },
      graphiql: true,
      customFormatErrorFn: (err) => {
        const errorReport = {
          message: err.message,
          locations: err.locations,
          stack: err.stack ? err.stack.split('\n') : [],
          path: err.path,
        };
        _a8f‍.g.console.error('GraphQL Error', errorReport);
        return config.isDev
          ? errorReport
          : { message: 'Oops! Something went wrong! :(' };
      },
    })
  );

  server.listen(config.port, () => {
    console.log(`Server URL: http://localhost:${config.port}/`);
  });
}

main();