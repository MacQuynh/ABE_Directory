let GraphQLID,GraphQLObjectType,GraphQLString,GraphQLInt,GraphQLNonNull,GraphQLList,User,Approach,extractPrefixedColumns;_f44‍.x([["default",()=>_f44‍.o]]);_f44‍.w("graphql",[["GraphQLID",["GraphQLID"],function(v){GraphQLID=v}],["GraphQLObjectType",["GraphQLObjectType"],function(v){GraphQLObjectType=v}],["GraphQLString",["GraphQLString"],function(v){GraphQLString=v}],["GraphQLInt",["GraphQLInt"],function(v){GraphQLInt=v}],["GraphQLNonNull",["GraphQLNonNull"],function(v){GraphQLNonNull=v}],["GraphQLList",["GraphQLList"],function(v){GraphQLList=v}]]);_f44‍.w("./user",[["default",["User"],function(v){User=v}]]);_f44‍.w("./approach",[["default",["Approach"],function(v){Approach=v}]]);_f44‍.w("../../db/utils",[["extractPrefixedColumns",["extractPrefixedColumns"],function(v){extractPrefixedColumns=v}]]);











const Task = new GraphQLObjectType({
    name: 'Task',
    fields: {
        id: { type: new GraphQLNonNull(GraphQLID) },
        content: { type: new GraphQLNonNull(GraphQLString) },
        tags: {
            type: new GraphQLNonNull(
                new GraphQLList(new GraphQLNonNull(GraphQLString))
            ),
            resolve: (source) => source.tags.split(','),
        },
        approachCount: { type: new GraphQLNonNull(GraphQLInt) },
        createdAt: {
            type: new GraphQLNonNull(GraphQLString),
            resolve: (source) => source.createdAt.toISOString(),
        },
        author: {
            type: new GraphQLNonNull(User),
            resolve: (source) =>
                extractPrefixedColumns({ prefixedObject: source, prefix: 'author' }),
        },
        approachList: {
            type: new GraphQLNonNull(
                new GraphQLList(new GraphQLNonNull(Approach))
            ),
            resolve: (source, args, { pgApi }) =>
                pgApi.approachList(source.id),
        },
    },
});
_f44‍.d(Task);