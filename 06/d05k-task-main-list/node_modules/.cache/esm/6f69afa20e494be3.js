let GraphQLSchema,GraphQLObjectType,GraphQLString,GraphQLInt,GraphQLNonNull,printSchema,GraphQLList,Task;_0e4‍.x([["schema",()=>schema]]);_0e4‍.w("graphql",[["GraphQLSchema",["GraphQLSchema"],function(v){GraphQLSchema=v}],["GraphQLObjectType",["GraphQLObjectType"],function(v){GraphQLObjectType=v}],["GraphQLString",["GraphQLString"],function(v){GraphQLString=v}],["GraphQLInt",["GraphQLInt"],function(v){GraphQLInt=v}],["GraphQLNonNull",["GraphQLNonNull"],function(v){GraphQLNonNull=v}],["printSchema",["printSchema"],function(v){printSchema=v}],["GraphQLList",["GraphQLList"],function(v){GraphQLList=v}]]);_0e4‍.w("./types/task",[["default",["Task"],function(v){Task=v}]]);









  
const QueryType = new GraphQLObjectType({
  name: 'Query',
  fields: {
    taskMainList: {
      type: new GraphQLList(new GraphQLNonNull(Task)),
      resolve: async (source, args, { pgApi }) => {
        return pgResp = await pgApi.taskMainList();
      },
    },
  },
});

       const schema = new GraphQLSchema({
  query: QueryType,
});

_0e4‍.g.console.log(printSchema(schema));