let GraphQLSchema,GraphQLObjectType,GraphQLString,GraphQLInt,GraphQLNonNull,printSchema,GraphQLList,Task;_baa‍.x([["schema",()=>schema]]);_baa‍.w("graphql",[["GraphQLSchema",["GraphQLSchema"],function(v){GraphQLSchema=v}],["GraphQLObjectType",["GraphQLObjectType"],function(v){GraphQLObjectType=v}],["GraphQLString",["GraphQLString"],function(v){GraphQLString=v}],["GraphQLInt",["GraphQLInt"],function(v){GraphQLInt=v}],["GraphQLNonNull",["GraphQLNonNull"],function(v){GraphQLNonNull=v}],["printSchema",["printSchema"],function(v){printSchema=v}],["GraphQLList",["GraphQLList"],function(v){GraphQLList=v}]]);_baa‍.w("./types/task",[["default",["Task"],function(v){Task=v}]]);









  
const QueryType = new GraphQLObjectType({
  name: 'Query',
  fields: {
    taskMainList: {
      type: new GraphQLList(new GraphQLNonNull(Task)),
      resolve: async (source, args, { pgPool }) => {
        const pgResp = await pgPool.query(`          
          SELECT *
          FROM azdev.tasks
          WHERE is_private = FALSE
          ORDER BY created_at DESC
          LIMIT 100
        `);
        return pgResp.rows;
      },
    },
  },
});

// SELECT id, content, tags,
//   approach_count AS "approachCount", created_at AS "createdAt"

       const schema = new GraphQLSchema({
  query: QueryType,
});

_baa‍.g.console.log(printSchema(schema));